// ================== Responsive Font Size with Sass Maps

// @mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {  
//   @each $fs-breakpoint, $fs-font-size in $fs-map {
//     //@debug $fs-breakpoint;
//     @if $fs-breakpoint == null {
//       @include make-font-size($fs-font-size);
//     }
//     @else {
//       // If $fs-font-size is a key that exists in
//       // $fs-breakpoints, use the value
//       @if map-has-key($fs-breakpoints, $fs-breakpoint) {
//         $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
//       }
//       @media screen and (min-width: $fs-breakpoint) {
//         @include make-font-size($fs-font-size);
//       }
//     }
//   }
// }

// @mixin make-font-size($fs-font-size) {
//   // If $fs-font-size is a list, include
//   // both font-size and line-height
//   @if type-of($fs-font-size) == "list" {
//     font-size: nth($fs-font-size, 1);
//     @if (length($fs-font-size) > 1) {
//       line-height: nth($fs-font-size, 2);
//     }
//   }
//   @else {
//     font-size: $fs-font-size;
//   }
// }




// ============= breakpoint media
@mixin breakpoint($breakpoint, $direction) {
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    
    @if $direction == max {
      @media (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else if $direction == min {      
      @media (min-width: $breakpoint-value) {
        @content;
      }
    } 
  
  // If the breakpoint doesn't exist in the map.
  } @else {
    @if $direction == max {
      @media (max-width: $breakpoint) {
        @content;
      }
    } @else if $direction == min {      
      @media (min-width: $breakpoint) {
        @content;
      }
    }  
  }
}
// ============= breakpoint media end

@mixin transition-prefixes($transitonVal) {
  transition: all ease-in-out $transitonVal;
  -webkit-transition: all ease-in-out $transitonVal;
  -moz-transition: all ease-in-out $transitonVal;
  -ms-transition: all ease-in-out $transitonVal;
}

@mixin box-shadow($x, $y, $blur, $spread, $color) {
  box-shadow: $x $y $blur $spread $color;
}

// round 
@mixin round($size, $radius: $size * 0.5) {
  width: $size;
  height: $size;

  @if $radius != 0 {
    border-radius: $radius;
  }
}
@mixin flex-center {
   display: flex; align-items: center;  justify-content: center;
}

  

@mixin afterbefore {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  top:0;
  bottom: 0;
  margin: auto;
}


@mixin gradient-background($direction, $colors...) {
  background: transparent;
  @each $color in $colors {
    background: linear-gradient($direction, $color 0%, $colors) 0% 0% no-repeat padding-box;
  }
}





